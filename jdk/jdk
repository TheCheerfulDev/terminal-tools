#!/usr/bin/env bash

export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

JDK_CONFIG_HOME="$HOME/.config/jdk"
SDKMAN_JAVA_HOME="$HOME/.sdkman/candidates/java"
JDK_JAVA_HOME="$HOME/.config/jdk/candidates"

if [ ! -d "$JDK_CONFIG_HOME" ]; then
  mkdir -p "$JDK_CONFIG_HOME"
fi

if [ ! -d "$JDK_JAVA_HOME" ]; then
  mkdir -p "$JDK_JAVA_HOME"
fi

select_java_version_from_sdkman() {
  sdk update java &>/dev/null
  all_candidates=$(sdk list java)
  all_candidates="${all_candidates}"

  OUTERIFS="$IFS"
  IFS=$'\n'
  candidates=()
  for line in ${all_candidates}; do
    OIFS="$IFS"
    IFS='|' read -r -a candidate_array <<<"$line"
    candidates+=($(echo "${candidate_array[5]}" | xargs))
    IFS="$OIFS"
  done
  IFS="$OUTERIFS"

  unset 'candidates[0]}'
  version=$(printf '%s\n' JDK "${candidates[@]}" | yank -x)
  if [ -z "$version" ]; then
    exit 1
  fi
}

read_alias_from_cli() {
  echo "What alias(es) do you want to use for this JDK? (space separated)"
  read -p "[Leave empty for none]: " -r -a aliases
}

install_via_url() {
  url=${1}
  echo "Installing a JDK via external URL: $url"

  while [[ -z $version ]]; do
    echo "What is the version of this JDK?"
    read -p "[Can't leave empty]: " -r version
  done

  read_alias_from_cli

  wget -O $JDK_JAVA_HOME/$version.tar.gz $1

  mkdir -p $JDK_JAVA_HOME/$version/$version.jdk && tar xf $JDK_JAVA_HOME/$version.tar.gz -C $JDK_JAVA_HOME/$version/$version.jdk --strip-components 1

  rm -f $JDK_JAVA_HOME/$version.tar.gz

  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/DISCLAIMER $JDK_JAVA_HOME/$version/DISCLAIMER
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/Welcome.html $JDK_JAVA_HOME/$version/Welcome.html
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/bin $JDK_JAVA_HOME/$version/bin
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/conf $JDK_JAVA_HOME/$version/conf
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/demo $JDK_JAVA_HOME/$version/demo
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/include $JDK_JAVA_HOME/$version/include
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/jmods $JDK_JAVA_HOME/$version/jmods
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/legal $JDK_JAVA_HOME/$version/legal
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/lib $JDK_JAVA_HOME/$version/lib
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/man $JDK_JAVA_HOME/$version/man
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/readme.txt $JDK_JAVA_HOME/$version/readme.txt
  ln -s $JDK_JAVA_HOME/$version/$version.jdk/Contents/Home/release $JDK_JAVA_HOME/$version/release

  jenv add "${version}" "${JDK_JAVA_HOME}/${version}"
  touch "${JDK_CONFIG_HOME}/${version}"
  for alias in "${aliases[@]}"; do
    jenv add "${alias}" "${JDK_JAVA_HOME}/${version}"
    if [ "${alias}" != "${version}" ]; then
      echo "${version}" >"${JDK_CONFIG_HOME}/${alias}"
    else
      touch "${JDK_CONFIG_HOME}/${version}"
    fi
  done
  exit 0
}

install_jdk() {
  if [ -z "$1" ]; then
    select_java_version_from_sdkman
    read_alias_from_cli
  elif [[ $1 == *"https://"* ]]; then
    echo "You reached the url installer"
    install_via_url "$1"
  elif [ "$#" -eq 1 ]; then
    version=${1}
    read_alias_from_cli
  else
    version=${1}
    shift
    aliases=("$@")
  fi

  if [[ $version == *"https://"* ]]; then
    install_via_url "$version"
  fi

  sdk install java "$version" || true

  jenv add "${version}" "${SDKMAN_JAVA_HOME}/${version}"
  touch "${JDK_CONFIG_HOME}/${version}"
  shift
  for alias in "${aliases[@]}"; do
    jenv add "${alias}" "${SDKMAN_JAVA_HOME}/${version}"
    if [ "${alias}" != "${version}" ]; then
      echo "${version}" >"${JDK_CONFIG_HOME}/${alias}"
    else
      touch "${JDK_CONFIG_HOME}/${version}"
    fi
  done
  sdk flush &>/dev/null
}

do_uninstall() {
  version=${1}
  jenv remove "${version}"

  #check if SDKMAN install
  if [[ -d $SDKMAN_JAVA_HOME/$version ]]; then
    sdk uninstall java "${version}"
  fi

  #check if JDK install
  if [[ -d $JDK_JAVA_HOME/$version ]]; then
    rm -rf $JDK_JAVA_HOME/$version
  fi

  rm -f "${JDK_CONFIG_HOME}/${version}" &>/dev/null
}

uninstall_alias() {
  echo "Removing alias $1 for JDK $2"
  alias_to_remove=${1}
  jenv remove "${alias_to_remove}"
  rm -f "${JDK_CONFIG_HOME}/${alias_to_remove}" &>/dev/null
}

#uninstall entry point
uninstall_jdk() {
  version=${1}
  if [ -z "$version" ]; then
    echo "No version specified. Please specify a version to uninstall."
    exit 1
  fi

  if [ ! -f "${JDK_CONFIG_HOME}/${version}" ]; then
    echo "No such version installed: ${version}"
    exit 1
  fi
  # If alias, only remove the alias
  if [ -s "${JDK_CONFIG_HOME}/${1}" ]; then
    alias_to_remove=$(cat "${JDK_CONFIG_HOME}/${version}")
    uninstall_alias "${version}" "${alias_to_remove}"
    exit 0
  fi
  # check if aliases have this version
  for full_path in "${JDK_CONFIG_HOME}"/*; do
    if [[ -d $full_path ]]; then
      continue
    fi

    if [ "$(basename "$full_path")" != "${version}" ] && [ "$(cat "$full_path")" == "${version}" ]; then
      uninstall_alias "$(basename "$full_path")" "${version}"
    fi
  done
  do_uninstall "${version}"
  sdk flush &>/dev/null
  exit 0
}

update_jdk() {
  if [ -z "$2" ]; then
    echo "Usage: jdk update <old_version> <new_version>"
    exit 1
  fi

  echo "$1"
  echo "$2"
  uninstall_jdk "$1"
  install_jdk "$2"
}

ls_jdk() {

  active_jdk=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  echo "Installed JDKs:"
  for full_path in "${JDK_CONFIG_HOME}"/*; do

    if [[ -d $full_path ]]; then
      continue
    fi

    formatted_version=$(printf "%-15s" "$(basename "${full_path}")")

    if [ "${active_jdk}" == "$(basename "${full_path}")" ]; then
      formatted_version="* ${formatted_version}"
    else
      formatted_version="  ${formatted_version}"
    fi

    if [ -s "$full_path" ]; then
      echo "$formatted_version -> $(cat "$full_path")"
    else
      echo "$formatted_version"
    fi
  done
}

active_jdk() {
  active_jdk_text=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk_text =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  alias=$(<"${JDK_CONFIG_HOME}/${active_jdk}")

  echo "Active JDK:"
  if [ -z "${alias}" ]; then
    echo "  ${active_jdk_text}"
  else
    echo "  ${active_jdk_text} -> ${alias}"
  fi
  exit 0
}

local_jdk() {
  if [ -z "$1" ]; then
    versions=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      if [[ -d $line ]]; then
        continue
      fi
      versions+=($(basename "${line}"))
    done
    version=$(printf '%s\n' "${versions[@]}" | yank)
    if [ -z "$version" ]; then
      exit 1
    fi

  else
    version=${1}
  fi
  jenv local "${version}"
  clear
}

edit_alias() {
  if [ -z "$1" ]; then
    aliases=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      if [[ -d $line ]]; then
        continue
      fi
      if [ -s "$line" ]; then
        aliases+=($(basename "${line}"))
      fi
    done

    alias=$(printf '%s\n' "${aliases[@]}" | yank)
    if [ -z "$alias" ]; then
      exit 1
    fi

  else
    alias=${1}
  fi

  if [ ! -f "$JDK_CONFIG_HOME/${alias}" ]; then
    echo "No such alias defined: $alias"
    exit 1
  fi

  vi "$JDK_CONFIG_HOME/${alias}"
}

jdk_clear() {
  if [ ! -f .java-version ]; then
    echo "No local profile found."
    exit 0
  fi

  version_to_clear=$(cat .java-version)

  #check if alias
  if [ -s "$JDK_CONFIG_HOME/${version_to_clear}" ]; then
    clear_version_text="$version_to_clear -> $(cat "$JDK_CONFIG_HOME/${version_to_clear}")"
  else
    clear_version_text=$version_to_clear
  fi

  rm -f .java-version
  echo "Local profile cleared: $clear_version_text"
}

jdk_alias() {
  if [ "$#" -ne 2 ]; then
    echo "You must provide both an alias and a version."
  fi

  new_alias=$1
  version=$2

  if [ -s "$JDK_CONFIG_HOME/$version" ]; then
    echo "Version $version is an alias. JDK does not suport alias chaining."
    exit 1
  fi

  if [ -s "$JDK_CONFIG_HOME/$new_alias" ]; then
    read -p "Alias $new_alias already exists. Do you want to override it? [yN]: " -r -n1 override_alias
    echo $'\n'
    if [[ "$override_alias" != "y" ]] && [[ "$override_alias" != "Y" ]]; then
      echo "No override will take place."
      exit 1
    else
      echo "Overriding alias $new_alias"
      uninstall_alias $(cat $JDK_CONFIG_HOME/$new_alias) $new_alias
    fi

  fi
  # create alias logic

}

if [ "$1" == "install" ]; then
  shift
  install_jdk "$@"
elif [ "$1" == "uninstall" ] || [ "$1" == "rm" ]; then
  uninstall_jdk "$2"
elif [ "$1" == "update" ]; then
  shift
  update_jdk "$@"
elif [ "$1" == "edit" ]; then
  edit_alias "$2"
elif [ "$1" == "local" ]; then
  local_jdk "$2"
elif [ "$1" == "clear" ]; then
  jdk_clear
elif [ "$1" == "alias" ]; then
  shift
  jdk_alias "$@"
elif [ "$1" == "ls" ] || [ "$1" == "list" ]; then
  ls_jdk
elif [ "$1" == "active" ] || [ "$1" == "ps" ]; then
  active_jdk
elif [ "$1" == "help" ] || [[ -z $1 ]]; then
  echo "Usage: jdk <command> [<args>]"
  echo ""
  echo "Commands:"
  echo "  install [<version>] [<alias> ...]   Install a JDK version. If no version is specified, you can select one interactively."
  echo "  install [<url>] [<alias> ...]       Install a JDK from an external URL (https://*.tar.gz)."
  echo "  rm, uninstall <version>             Uninstall a JDK version."
  echo "  update <old_version> <new_version>  Update the old version to the new version. Aliases will have to be specified while updating."
  echo "  edit [<alias>]                      Opens vi to edit the alias. If no alias is specified, you can select one interactively."
  echo "  local [<version>]                   Set the local application-specific JDK. If no version is specified, you can select one interactively."
  echo "  clear                               Removes the local application-specific JDK, if one is set in the current directory."
  echo "  alias <alias> <version>             Set or override alias for specified version."
  echo "  ls, list                            List installed JDK versions."
  echo "  ps, active                          Show the currently active JDK and its jenv origin."
  echo "  help                                Show this help."
  echo ""
  exit 0
else
  echo "jdk: no such command: '$1'"
  exit 1
fi
