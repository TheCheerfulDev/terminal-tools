#!/usr/bin/env bash

export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

JDK_CONFIG_HOME="$HOME/.config/jdk"
SDKMAN_JAVA_HOME="$HOME/.sdkman/candidates/java"

if [ ! -d "$JDK_CONFIG_HOME" ]; then
  mkdir -p "$JDK_CONFIG_HOME"
fi

select_java_version_from_sdkman() {
  sdk update java &>/dev/null
  all_candidates=$(sdk list java)
  all_candidates="${all_candidates}"

  OUTERIFS="$IFS"
  IFS=$'\n'
  candidates=()
  for line in ${all_candidates}; do
    OIFS="$IFS"
    IFS='|' read -r -a candidate_array <<<"$line"
    candidates+=($(echo "${candidate_array[5]}" | xargs))
    IFS="$OIFS"
  done
  IFS="$OUTERIFS"

  unset 'candidates[0]}'
  version=$(printf '%s\n' JDK "${candidates[@]}" | yank -x)
  if [ -z "$version" ]; then
    exit 1
  fi
}

read_alias_from_cli() {
  echo "What alias(es) do you want to use for this JDK? (space separated)"
  read -p "[Leave empty for none]: " -r -a aliases
}

install_jdk() {
  if [ -z "$1" ]; then
    select_java_version_from_sdkman
    read_alias_from_cli
  elif [ "$#" -eq 1 ]; then
    version=${1}
    read_alias_from_cli
  else
    version=${1}
    shift
    aliases=("$@")
  fi

  sdk install java "$version" || true

  jenv add "${version}" "${SDKMAN_JAVA_HOME}/${version}"
  touch "${JDK_CONFIG_HOME}/${version}"
  shift
  for alias in "${aliases[@]}"; do
    jenv add "${alias}" "${SDKMAN_JAVA_HOME}/${version}"
    if [ "${alias}" != "${version}" ]; then
      echo "${version}" >"${JDK_CONFIG_HOME}/${alias}"
    else
      touch "${JDK_CONFIG_HOME}/${version}"
    fi
  done
  sdk flush &>/dev/null
}

do_uninstall() {
  version=${1}
  jenv remove "${version}"
  sdk uninstall java "${version}"

  rm -f "${JDK_CONFIG_HOME}/${version}" &>/dev/null
}

uninstall_alias() {
  echo "Removing alias $1 for JDK $2"
  alias_to_remove=${1}
  jenv remove "${alias_to_remove}"
  rm -f "${JDK_CONFIG_HOME}/${alias_to_remove}" &>/dev/null
}

#uninstall entry point
uninstall_jdk() {
  version=${1}
  if [ -z "$version" ]; then
    echo "No version specified. Please specify a version to uninstall."
    exit 1
  fi

  if [ ! -f "${JDK_CONFIG_HOME}/${version}" ]; then
    echo "No such version installed: ${version}"
    exit 1
  fi
  # If alias, only remove the alias
  if [ -s "${JDK_CONFIG_HOME}/${1}" ]; then
    alias_to_remove=$(cat "${JDK_CONFIG_HOME}/${version}")
    uninstall_alias "${version}" "${alias_to_remove}"
    exit 0
  fi
  # check if aliases have this version
  for full_path in "${JDK_CONFIG_HOME}"/*; do
    if [ "$(basename "$full_path")" != "${version}" ] && [ "$(cat "$full_path")" == "${version}" ]; then
      uninstall_alias "$(basename "$full_path")" "${version}"
    fi
  done
  do_uninstall "${version}"
  sdk flush &>/dev/null
}

update_jdk() {
  if [ -z "$2" ]; then
    echo "Usage: jdk update <old_version> <new_version>"
    exit 1
  fi

  echo "$1"
  echo "$2"
  uninstall_jdk "$1"
  install_jdk "$2"
}

ls_jdk() {

  active_jdk=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  echo "Installed JDKs:"
  for full_path in "${JDK_CONFIG_HOME}"/*; do

    formatted_version=$(printf "%-15s" "$(basename "${full_path}")")

    if [ "${active_jdk}" == "$(basename "${full_path}")" ]; then
      formatted_version="* ${formatted_version}"
    else
      formatted_version="  ${formatted_version}"
    fi

    if [ -s "$full_path" ]; then
      echo "$formatted_version -> $(cat "$full_path")"
    else
      echo "$formatted_version"
    fi
  done
}

active_jdk() {
  active_jdk_text=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk_text =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  alias=$(<"${JDK_CONFIG_HOME}/${active_jdk}")

  echo "Active JDK:"
  if [ -z "${alias}" ]; then
    echo "  ${active_jdk_text}"
  else
    echo "  ${active_jdk_text} -> ${alias}"
  fi
  exit 0
}

local_jdk() {
  if [ -z "$1" ]; then
    versions=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      versions+=($(basename "${line}"))
    done

    version=$(printf '%s\n' "${versions[@]}" | yank)
    if [ -z "$version" ]; then
      exit 1
    fi

  else
    version=${1}
  fi
  jenv local "${version}"
}

if [ "$1" == "install" ]; then
  shift
  install_jdk "$@"
elif [ "$1" == "uninstall" ] || [ "$1" == "rm" ]; then
  uninstall_jdk "$2"
elif [ "$1" == "update" ]; then
  shift
  update_jdk "$@"
elif [ "$1" == "local" ]; then
  local_jdk "$2"
elif [ "$1" == "ls" ] || [ "$1" == "list" ]; then
  ls_jdk
elif [ "$1" == "active" ] || [ "$1" == "ps" ]; then
  active_jdk
elif [ "$1" == "help" ] || [[ -z $1 ]]; then
  echo "Usage: jdk <command> [<args>]"
  echo ""
  echo "Commands:"
  echo "  install [<version>] [<alias> ...]   Install a JDK version. If no version is specified, you can select one interactively."
  echo "  rm, uninstall <version>             Uninstall a JDK version."
  echo "  update <old_version> <new_version>  Update the old version to the new version. Aliases will have to be specified while updating."
  echo "  ls, list                            List installed JDK versions."
  echo "  ps, active                          Show the currently active JDK and its jenv origin."
  echo "  help                                Show this help."
  echo ""
  exit 0
else
  echo "jdk: no such command: '$1'"
  exit 1
fi
