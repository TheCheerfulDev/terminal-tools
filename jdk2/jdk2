#!/usr/bin/env bash
# This wrapper is used to manage JDK installations without the need for SDKMAN.

set -o errexit
set -o pipefail

bold="$(tput bold)"
reset="$(tput sgr0)"
red="$(tput setaf 1)"
green="$(tput setaf 2)"

JDK_APP_VERSION="2.0.1"
JDK_CONFIG_HOME="${HOME}/.config/jdk2"
JDK_JAVA_HOME="${JDK_CONFIG_HOME}/candidates"

#Create directories if they don't exist yet
if [ ! -d "${JDK_CONFIG_HOME}" ]; then
  mkdir -p "${JDK_CONFIG_HOME}"
fi
if [ ! -d "${JDK_JAVA_HOME}" ]; then
  mkdir -p "${JDK_JAVA_HOME}"
fi

function completion() {
  SOURCE=${BASH_SOURCE[0]}
  while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)

  cat ${DIR}/jdk2-completion.sh

  exit 0
}

# This function is for the jdk completion that completes the local JDK versions.

# This function is used to install a JDK version.
# $1: The url to download the JDK from. Mandatory.
# $2: The version of the JDK to install. Optional.
function install_jdk() {
  if [ -z "${1}" ]; then
    echo "[${red}ERROR${reset}] No URL provided to install JDK from." >&2
    print_jdk_websites
    exit 1
  fi

  local url="${1}"
  local version="${2}"

  # Check if url is tarball
  if [[ "${url}" != *.tar.gz ]]; then
    echo "[${red}ERROR${reset}] URL ${url} is not a tarball." >&2
    exit 1
  fi

  # if $2/$version is not provided, prompt the user for the version. This version is mandatory
  while [ -z "${version}" ]; do
    read -p "Please provide the version of the JDK to install: " version
  done

  # Check if version is already installed
  if [ -f "${JDK_CONFIG_HOME}/${version}" ]; then
    echo "[${red}ERROR${reset}] JDK version ${version} is already installed." >&2
    exit 1
  fi

  # Download the JDK
  echo "[${green}INFO${reset}] Downloading JDK ${version} from ${url}"
  wget --output-document="${JDK_JAVA_HOME}/${version}.tar.gz" --quiet --show-progress "${url}"
  # Extract the JDK
  mkdir -p "${JDK_JAVA_HOME}/${version}/${version}.jdk" && tar xf "${JDK_JAVA_HOME}/${version}.tar.gz" -C "${JDK_JAVA_HOME}/${version}/${version}.jdk" --strip-components 1

  # Check if OS is linux or mac
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Set path_substring for linux
    local path_substring=".jdk/"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Set path_substring for mac
    local path_substring=".jdk/Contents/Home/"
  fi

  # Create a symlink to the JDK
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}DISCLAIMER" "${JDK_JAVA_HOME}/${version}/DISCLAIMER"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}Welcome.html" "${JDK_JAVA_HOME}/${version}/Welcome.html"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}bin" "${JDK_JAVA_HOME}/${version}/bin"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}conf" "${JDK_JAVA_HOME}/${version}/conf"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}demo" "${JDK_JAVA_HOME}/${version}/demo"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}include" "${JDK_JAVA_HOME}/${version}/include"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}jmods" "${JDK_JAVA_HOME}/${version}/jmods"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}legal" "${JDK_JAVA_HOME}/${version}/legal"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}lib" "${JDK_JAVA_HOME}/${version}/lib"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}man" "${JDK_JAVA_HOME}/${version}/man"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}readme.txt" "${JDK_JAVA_HOME}/${version}/readme.txt"
  ln -s "${JDK_JAVA_HOME}/${version}/${version}${path_substring}release" "${JDK_JAVA_HOME}/${version}/release"

  # Remove the downloaded tarball
  rm "${JDK_JAVA_HOME}/${version}.tar.gz"

  # Add version to jenv
  jenv add "${version}" "${JDK_JAVA_HOME}/${version}" >/dev/null 2>&1

  # Check if previous command ended with an error
  if [ $? -ne 0 ]; then
    echo "[${red}ERROR${reset}] Failed to install JDK version ${version}." >&2
    rm -rf "${JDK_JAVA_HOME}/${version}"
    exit 1
  fi

  echo "[${green}INFO${reset}] Successfully installed JDK version ${version}."

  # Add version to JDK config
  touch "${JDK_CONFIG_HOME}/${version}"

  alias_for_jdk "${version}"
}

# This function is the entrypoint to uninstall either a JDK version or alias.
# $1: The version of the JDK, or the alias to uninstall. Mandatory.
function uninstall_entrypoint() {
  local version="${1}"
  if [ -z "${version}" ]; then
    echo "[${red}ERROR${reset}] No version provided to uninstall JDK or alias." >&2
    exit 1
  fi
  # Check if the version is installed
  if [ ! -f "${JDK_CONFIG_HOME}/${version}" ]; then
    echo "[${red}ERROR${reset}] JDK version or alias ${version} is not installed." >&2
    exit 1
  fi

  # Check if the version is an alias
  if [ -s "${JDK_CONFIG_HOME}/${version}" ]; then
    remove_alias_for_jdk "$(cat "${JDK_CONFIG_HOME}/${version}")"
  else
    remove_jdk "${version}"
  fi
}

# This function is used to list all installed JDK versions.
function list_jdk() {
  active_jdk=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  echo "Installed JDKs:"
  for full_path in "${JDK_CONFIG_HOME}"/*; do
    if [[ -d $full_path ]]; then
      continue
    fi

    formatted_version=$(printf "%-15s" "$(basename "${full_path}")")

    if [ "${active_jdk}" == "$(basename "${full_path}")" ]; then
      formatted_version="* ${formatted_version}"
    else
      formatted_version="  ${formatted_version}"
    fi

    if [ -s "$full_path" ]; then
      echo "$formatted_version -> $(cat "$full_path")"
    else
      echo "$formatted_version"
    fi
  done
}

# This function does the actual uninstallation of a JDK and all its aliases.
function remove_jdk() {
  local version="${1}"
  # Prompt the user to confirm the uninstallation
  read -p "Are you sure you want to uninstall JDK version ${version}? [y/N] " -n1 confirm
  echo ""
  if [ "${confirm}" != "y" ]; then
    echo "Aborting uninstallation."
    exit 1
  fi

  # Remove the JDK installation
  rm -rf "${JDK_JAVA_HOME}/${version}"

  # Remove version from jenv
  jenv remove "${version}" >/dev/null 2>&1

  # Check if previous command ended with an error
  if [ $? -ne 0 ]; then
    echo "[${red}ERROR${reset}] Failed to uninstall JDK version ${version}." >&2
    exit 1
  fi

  # Remove alias for version
  remove_alias_for_jdk "${version}"

  # Remove version from jdk
  rm "${JDK_CONFIG_HOME}/${version}"

  echo "[${green}INFO${reset}] Successfully uninstalled JDK version ${version}."
}

# This function removes the alias for provided JDK version.
# $1: The version of the JDK to remove the alias for. Mandatory.
function remove_alias_for_jdk() {
  local version="${1}"
  if [ -z "${version}" ]; then
    echo "[${red}ERROR${reset}] No version provided to remove alias for JDK." >&2
    exit 1
  fi

  for full_path in "${JDK_CONFIG_HOME}"/*; do
    #Skip directories
    if [[ -d $full_path ]]; then
      continue
    fi
    #Check if the file is an alias for the provided version, if so, remove it.
    if [ "$(cat "${full_path}")" == "${version}" ]; then
      jenv remove "$(basename "${full_path}")" >/dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "[${red}ERROR${reset}] Failed to remove alias $(basename "${full_path}") for JDK version ${version}." >&2
        exit 1
      fi
      rm "${full_path}"
      echo "[${green}INFO${reset}] Successfully removed alias $(basename "${full_path}") for JDK version ${version}."
      break
    fi
  done

}

# This function is used to set an alias for a JDK version.
# $1: The version of the JDK to set an alias for. Mandatory.
function alias_for_jdk() {
  local version="${1}"
  if [ -z "${version}" ]; then
    echo "[${red}ERROR${reset}] No version provided to set alias for JDK." >&2
    exit 1
  fi

  # Check if the version is installed
  if [ ! -d "${JDK_JAVA_HOME}/${version}" ]; then
    echo "[${red}ERROR${reset}] JDK version ${version} is not installed." >&2
    exit 1
  fi

  # Prompt the user for the alias
  read -p "Please provide alias for JDK version ${version} (leave empty for none): " alias

  # Set the alias
  if [ -z "${alias}" ]; then
    exit 0
  fi

  # Check if the alias is already in use
  if [ -f "${JDK_CONFIG_HOME}/${alias}" ]; then
    echo "[${red}ERROR${reset}] Alias ${alias} -> $(cat ${JDK_CONFIG_HOME}/${alias}) is already in use. Remove it with the uninstall command first." >&2
    exit 1
  fi

  echo "${version}" >"${JDK_CONFIG_HOME}/${alias}"
  jenv add "${alias}" "${JDK_JAVA_HOME}/${version}" >/dev/null 2>&1

  if [ $? -ne 0 ]; then
    echo "[${red}ERROR${reset}] Alias ${alias} -> ${version} could not be set." >&2
    exit 1
  fi

  echo "[${green}INFO${reset}] Alias ${alias} -> ${version} set."

}

# This function is used to add an alias to a JDK version.
# $1: The version of the JDK to add an alias to.
function add_alias_to_existing_jdk() {
  local version="${1}"
  if [ -z "${version}" ]; then
    local versions=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      if [[ -d "${line}" ]]; then
        continue
      fi
      if [ -s "${line}" ]; then
        continue
      fi
      versions+=($(basename "${line}"))
    done
    version=$(printf '%s\n' "${versions[@]}" | yank)
    if [ -z "$version" ]; then
      echo "[${red}ERROR${reset}] No version provided to add alias to JDK." >&2
      exit 1
    fi

  fi

  # Check if the version is installed
  if [ ! -d "${JDK_JAVA_HOME}/${version}" ]; then
    echo "[${red}ERROR${reset}] JDK version ${version} is not installed." >&2
    exit 1
  fi

  alias_for_jdk "${version}"

}

function print_version() {
  echo "jdk2 © Mark Hendriks <thecheerfuldev>"
  echo "Version ${JDK_APP_VERSION}"
}

function clear_local_jdk() {
  if [ -f ".java-version" ]; then
    rm .java-version
  fi
}

function active_jdk() {
  active_jdk_text=$(jenv version)
  regex="^(.+) [\(]{1}.*$"

  if [[ $active_jdk_text =~ $regex ]]; then
    active_jdk="${BASH_REMATCH[1]}"
  fi
  alias=$(<"${JDK_CONFIG_HOME}/${active_jdk}")

  echo "Active JDK:"
  if [ -z "${alias}" ]; then
    echo "  ${active_jdk_text}"
  else
    echo "  ${active_jdk_text} -> ${alias}"
  fi
  exit 0
}

# This function is used to set the local JDK version.
# $1: The version of the JDK to set as local. Optional.
function set_local_jdk() {
  if [ -z "${1}" ]; then
    local versions=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      if [[ -d $line ]]; then
        continue
      fi
      versions+=($(basename "${line}"))
    done
    version=$(printf '%s\n' "${versions[@]}" | yank)
    if [ -z "$version" ]; then
      exit 1
    fi
  else
    local version=${1}
  fi

  # Check if version is installed
  if [ ! -f "${JDK_CONFIG_HOME}/${version}" ]; then
    echo "[${red}ERROR${reset}] JDK version ${version} is not installed." >&2
    exit 1
  fi

  jenv local "${version}"
  echo "[${green}INFO${reset}] Local JDK set to ${version}"
}

# This function is used to set the global JDK version.
# $1: The version of the JDK to set as global. Optional.
function set_global_jdk() {
  if [ -z "${1}" ]; then
    local versions=()
    for line in "${JDK_CONFIG_HOME}"/*; do
      if [[ -d $line ]]; then
        continue
      fi
      versions+=($(basename "${line}"))
    done
    version=$(printf '%s\n' "${versions[@]}" | yank)
    if [ -z "$version" ]; then
      exit 1
    fi
  else
    local version=${1}
  fi
  jenv global "${version}"
  echo "Global JDK set to ${version}"
}

function print_jdk_websites() {
  echo "Resources for downloading JDKs:"
  echo "  Amazon Corretto: https://aws.amazon.com/corretto/"
  echo "  Azul Zulu:       https://www.azul.com/downloads/"
  echo "  OpenJDK:         https://jdk.java.net/"
  echo "  Oracle JDK:      https://www.oracle.com/java/technologies/downloads/"
  echo "  Temurin:         https://adoptium.net/temurin/releases/"
}

function print_help_info() {
  echo "Usage: jdk <command> [<args>]"
  echo ""
  echo "Commands:"
  echo "  install <url> [<version>]   Install a JDK from the provided URL."
  echo "  uninstall, rm <version>     Uninstall a JDK version."
  echo "  alias [<version>]           Add an alias to an existing JDK."
  echo "  local [<version>]           Set the local application-specific JDK."
  echo "  global [<version>]          Set the global JDK."
  echo "  ls, list                    List all installed JDK versions."
  echo "  ps, active                  Show the currently active JDK and its jenv origin."
  echo "  clear                       Clears the local application-specific JDK, if one is set in the current directory."
  echo "  version                     Print the version information of the JDK wrapper."
  echo ""
}

function main() {
  if [ "${1}" == "install" ]; then
    install_jdk "${2}" "${3}"
  elif [ "${1}" == "uninstall" ] || [ "${1}" == "rm" ]; then
    uninstall_entrypoint "${2}"
  elif [ "${1}" == "list" ] || [ "${1}" == "ls" ]; then
    list_jdk
  elif [ "${1}" == "alias" ]; then
    add_alias_to_existing_jdk "${2}"
  elif [ "${1}" == "clear" ]; then
    clear_local_jdk
  elif [ "${1}" == "active" ] || [ "${1}" == "ps" ]; then
    active_jdk
  elif [ "${1}" == "local" ]; then
    set_local_jdk "${2}"
  elif [ "${1}" == "global" ]; then
    set_global_jdk "${2}"
  elif [ "${1}" == "version" ]; then
    print_version
  elif [ "${1}" == "completion" ]; then
    completion
  else
    print_help_info
  fi
}

main "${@}"
